\documentclass[11pt]{article}
\usepackage{graphicx, verbatim}
\usepackage{alltt}
\usepackage{enumitem}
\usepackage{color}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{linkcolor}{rgb}{0.066,0.545,0.890}
\usepackage{hyperref}
\hypersetup{
  colorlinks=true,
  urlcolor=linkcolor,
  linkcolor=linkcolor
}
\setlength{\textwidth}{6.5in} 
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{0in} 
\setlength{\evensidemargin}{0in}
\setlength{\topmargin}{-1.5cm}
\newcommand{\arcdi}{\texttt{arcdiagram}}
\newcommand{\code}[1]{\texttt{#1}}


\begin{document}
\title{Arc Diagram: \textit{Les Mis\'{e}rables}}
\author{
 Gaston Sanchez\\
 \small \href{http://www.gastonsanchez.com}{www.gastonsanchez.com}
}
\date{}
\maketitle


%--------------------------------------------

<<miserables_cover, echo=FALSE, message=FALSE>>=
library(igraph)
library(arcdiagram)
library(dplyr)

# read 'gml' file
mis_file = "lesmiserables.gml"
mis_graph = read.graph(mis_file, format="gml")

# get vertex labels
vlabels = get.vertex.attribute(mis_graph, "label")

# get vertex groups
vgroups = get.vertex.attribute(mis_graph, "group")

# get vertex fill color
vfill = get.vertex.attribute(mis_graph, "fill")

# get vertex border color
vborders = get.vertex.attribute(mis_graph, "border")

# get vertex degree
degrees = degree(mis_graph)

# get edges value
values = get.edge.attribute(mis_graph, "value")

# get edgelist
edgelist = get.edgelist(mis_graph)

# groups and degree
x = data.frame(vgroups, degrees, vlabels, ind=1:vcount(mis_graph))
y = arrange(x, desc(vgroups), desc(degrees))
new_ord = y$ind
@

<<miser_arcdiag_cover, echo=FALSE, fig.width=13, fig.height=5.5, out.width='1\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
# plot
op = par(mar = c(6, 0, 1, 0))
arcplot(edgelist, ordering=new_ord, labels=vlabels, cex.labels=0.8,
        show.nodes=TRUE, col.nodes=vborders, bg.nodes=vfill, 
        cex.nodes = log(degrees)+0.5, pch.nodes=21,
        lwd.nodes = 2, line=-0.5, 
        col.arcs = hsv(0, 0, 0.2, 0.25), lwd.arcs = 1.5 * values)
par(op)
@



\section{Introduction}
This document describes the required steps that you'll need to follow to get an arc diagram like the one from \textit{Les Mis\'{e}rables} with the R package \arcdi{} (a minimalist package designed for plotting pretty arc diagrams).

\vspace{5 mm}
\subsection{Les Mis\'{e}rables}
The file for this example is \texttt{lesmiserables.gml} which is available at: \\
\href{https://github.com/gastonstat/arcdiagram}{https://github.com/gastonstat/arcdiagram} \\
This file is a text file with \textbf{GML} format, which is just a type of format for graphs. You can find more information about GML format at: \\
\href{http://en.wikipedia.org/wiki/Graph_Modelling_Language}{http://en.wikipedia.org/wiki/Graph\_Modelling\_Language}

\subsubsection*{Step 1: Read data in R}
After downloading the file, you will have to import it in R using the function \texttt{read.graph()} with the argument \texttt{format = "gml"}. I assume that the file is in your working directory:

<<miserables_file, eval=FALSE>>=
# load 'arcdiagram'
library(arcdiagram)

# read 'gml' file
mis_graph = read.graph("lesmiserables.gml", format="gml")
@


\subsubsection*{Step 2: Extract edge list}
Since we will use the function \texttt{arcplot()}, we need an \textbf{edgelist}. The good news is that we can use the function \texttt{get.edgelist()} to extract it from \texttt{mis\_graph}:
<<get_edgelist>>=
# get edgelist
edgelist = get.edgelist(mis_graph)
@

Once we have the \texttt{edgelist}, we can try to get a first ---very raw--- arc diagram with \texttt{arcplot()}:
<<miser_plot1, fig.width=10, fig.height=5, out.width='.99\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=c(1,3)>>=
# first plot
op = par(mar = c(2, 0.5, 1, 0.5))
arcplot(edgelist)
par(op)
@

You can see from the previous figure that our first arc diagram has nothing to do with what we are looking for. A better approximation can be obtained if we start tweaking some of the parameters like the symbols of the nodes, the color of the arcs, and their line widths:
<<miser_plot2, fig.width=10, fig.height=5, out.width='.99\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=c(1,3)>>=
# second plot
op = par(mar = c(2, 0.5, 1, 0.5))
arcplot(edgelist, cex.labels=0.8,
        show.nodes=TRUE, lwd.nodes = 2, line=-0.5, 
        col.arcs = hsv(0, 0, 0.2, 0.25), lwd.arcs = 1.5)
par(op)
@


\subsubsection*{Step 3: Information about nodes and edges}
Most of the necessary ingredients to create our pretty arc diagram are contained in the graph object \texttt{mis\_graph}: the fill color of the nodes, the border color of the nodes, the group memberships, the node labels, and the arc widths. If you print \texttt{mis\_graph} you will see the following output:
<<view_mis_graph>>=
# what's in mis_graph
mis_graph
@
The first line tells you that \texttt{mis\_graph} is an undirected graph with 77 nodes and 254 edges (\texttt{U--- 77 254 --}). The second and third lines indicate that \texttt{mis\_graph} has the following attributes (\texttt{attr}):
\begin{itemize}
 \item \texttt{id (v/n)}: this is the id of the nodes (numeric)
 \item \texttt{label (v/c)}: this the label of the nodes (character)
 \item \texttt{group (v/n)}: this is the group indicator of nodes (numeric)
 \item \texttt{fill (v/c)}: this is the fill color of the nodes (character)
 \item \texttt{border (v/c)}: this is the border color of the nodes (character)
 \item \texttt{value (e/n)}: this is a value associated to the edges (numeric)
\end{itemize}

To extract all the data attributes associated with the nodes in the \texttt{mis\_graph} we have to use the functions \texttt{get.vertex.attribute()} and \texttt{get.edge.attribute()}:
<<get_attributes>>=
# get vertex labels
vlabels = get.vertex.attribute(mis_graph, "label")

# get vertex groups
vgroups = get.vertex.attribute(mis_graph, "group")

# get vertex fill color
vfill = get.vertex.attribute(mis_graph, "fill")

# get vertex border color
vborders = get.vertex.attribute(mis_graph, "border")

# get edges value
values = get.edge.attribute(mis_graph, "value")
@

In addition to the node (i.e. vertices) attributes, we also need to get the degree of the nodes by using the function \texttt{degree()}:
<<get_degree>>=
# get vertex degree
degrees = degree(mis_graph)
@

<<echo=FALSE>>=
options(width = 60)
@

Ok, let's try a third plot attempt:
<<miser_plot3, fig.width=10, fig.height=5, out.width='.99\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=c(1,3)>>=
# third plot
op = par(mar = c(5, 0, 1, 0))
arcplot(edgelist, labels=vlabels, cex.labels=0.8,
        show.nodes=TRUE, col.nodes=vborders, bg.nodes=vfill, 
        cex.nodes = log(degrees)+0.5, pch.nodes=21,
        lwd.nodes = 2, line=-0.5, 
        col.arcs = hsv(0, 0, 0.2, 0.25), lwd.arcs = 1.5 * values)
par(op)
@

\subsubsection*{Step 4: Nodes Ordering}
We are very close to our objective but we still need the right ordering for the nodes. One option to get the nodes ordering is by using the package \texttt{dplyr} (by Hadley Wickham):
<<dplyr, eval=FALSE>>=
# if you haven't installed it
install.packages("dplyr")

# load 'dplyr'
library(dplyr)
@

The idea is to create a data frame with the following variables: \texttt{vgroups}, \texttt{degrees}, \texttt{vlabels}, and a numeric index for the nodes \texttt{ind}. 
<<data_frame>>=
# data frame with node attributes
x = data.frame(vgroups, degrees, vlabels, ind=1:vcount(mis_graph))

# take a peek to the data frame
head(x)
@

We will arrange the data frame in descending order, first by \texttt{vgroups} and then by \texttt{degrees}; what we want is the sorted \texttt{ind}:
<<ordering>>=
# arrange by groups and degree
y = arrange(x, desc(vgroups), desc(degrees))

# what does 'y' look like?
head(y)

# get 'ind' ordering
new_ord = y$ind
@


\subsubsection*{Step 5: Final plot}
Now we are ready to produce the desired arc diagram:
<<miser_arcdiag_plot, fig.width=10, fig.height=5, out.width='.99\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=c(1,3)>>=
# plot
op = par(mar = c(6, 0, 1, 0))
arcplot(edgelist, ordering=new_ord, labels=vlabels, cex.labels=0.8,
        show.nodes=TRUE, col.nodes=vborders, bg.nodes=vfill, 
        cex.nodes = log(degrees)+0.5, pch.nodes=21,
        lwd.nodes = 2, line=0, 
        col.arcs = hsv(0, 0, 0.2, 0.25), lwd.arcs = 1.5 * values)
par(op)
@



%--------------------------------------------
\vspace{5 mm}
\section*{Some References}
\begin{itemize}
 \item Arc Diagrams in 'Visual Complexity' (by Manuel Lima) \\
  \href{http://www.visualcomplexity.com/vc/index.cfm?method=Arc\%20Diagrams}{http://www.visualcomplexity.com/vc/index.cfm?method=Arc\%20Diagrams}
 \item Protovis by Mike Bostock \\
  \href{http://mbostock.github.com/protovis/ex/arc.html}{http://mbostock.github.com/protovis/ex/arc.html}
 \item Arc Diagrams: Visualizing Structure in Strings by Martin Wattenberg \\
  \href{http://hint.fm/papers/arc-diagrams.pdf}{http://hint.fm/papers/arc-diagrams.pdf}
 \item R-chie: A web server and R package for plotting arc diagrams of RNA secondary structures (by Daniel Lai, Jeff R. Proctor, Jing Yun A. Zhu, and Irmtraud M. Meyer) \\
  \href{http://www.e-rna.org/r-chie/index.cgi}{http://www.e-rna.org/r-chie/index.cgi}
\end{itemize}


\end{document}